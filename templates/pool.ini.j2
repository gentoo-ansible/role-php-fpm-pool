; {{ ansible_managed }}
{# This must be here instead of vars due to some weird bug with resolving variables passed to filters. #}
{% set _prefix = php_fpm_chroot_dir if php_fpm_chroot_enabled | bool else '/' %}
{% set _temp_dir = '/' + php_fpm_temp_dir | relpath(_prefix) if php_fpm_temp_dir else '_NONE_' %}
{% set _ini_overrides = {
    'error_log': '/' + php_fpm_logs_dir | relpath(_prefix) + '/php.error.log',
    'opcache.error_log': '/' + php_fpm_logs_dir | relpath(_prefix) + '/php.error.log',
    'sys_temp_dir': _temp_dir,
    'upload_tmp_dir': _temp_dir,
    'session.save_path': _temp_dir,
    'upload_max_filesize': "%sM"|format(php_fpm_upload_max_size) if php_fpm_upload_max_size else '_NONE_',
    'post_max_size': "%sM"|format(php_fpm_upload_max_size) if php_fpm_upload_max_size else '_NONE_',
    'file_uploads': true if php_fpm_upload_max_size else '_NONE_',
    'memory_limit': "%sM" | format(php_fpm_upload_max_size if php_fpm_upload_max_size and php_fpm_upload_max_size > php_fpm_memory_limit else php_fpm_memory_limit),
    'disable_functions': php_fpm_disable_functions | join(',')
    } | hash_merge(php_fpm_ini_overrides)
%}

[global]
; Error log file
; Note: the default prefix is /var/lib.
; Note: the path is *not* relative to chroot.
; Default Value: log/php-fpm.log
error_log = {{ php_fpm_logs_dir }}/php-fpm.log

; Log level
; Possible Values: alert, error, warning, notice, debug
; Default Value: notice
log_level = {{ php_fpm_log_level }}

; If this number of child processes exit with SIGSEGV or SIGBUS within the time
; interval set by emergency_restart_interval then FPM will restart. A value
; of '0' means 'Off'.
; Default Value: 0
emergency_restart_threshold = 10

; Interval of time used by emergency_restart_interval to determine when
; a graceful restart will be initiated.  This can be useful to work around
; accidental corruptions in an accelerator's shared memory.
; Available Units: s(econds), m(inutes), h(ours), or d(ays)
; Default Unit: seconds
; Default Value: 0
emergency_restart_interval = 1m

; Time limit for child processes to wait for a reaction on signals from master.
; Available units: s(econds), m(inutes), h(ours), or d(ays)
; Default Unit: seconds
; Default Value: 0
process_control_timeout = 10s


[{{ php_fpm_pool_name | mandatory }}]
; The address on which to accept FastCGI requests.
; Valid syntaxes are:
;   'ip.add.re.ss:port'    - to listen on a TCP socket to a specific address on
;                            a specific port;
;   'port'                 - to listen on a TCP socket to all addresses on a
;                            specific port;
;   '/path/to/unix/socket' - to listen on a unix socket (the path is *not*
;                            relative to chroot!)
; Note: This value is mandatory.
{% if php_fpm_port > 0 %}
listen = {{ php_fpm_bind_ip | default('0.0.0.0', true) }}:{{ php_fpm_port }}
{% else %}
listen = {{ php_fpm_socket.path | default('/run/' + php_fpm_pool_name + '/fastcgi.sock') }}

; Set permissions for unix socket, if one is used. In Linux, read/write
; permissions must be set in order to allow connections from a web server. Many
; BSD-derived systems allow connections regardless of permissions.
; Default Values: user and group are set as the running user
;                 mode is set to 0666
listen.owner = {{ php_fpm_socket.owner | default(php_fpm_user) }}
listen.group = {{ php_fpm_socket.group | default(php_fpm_group) }}
listen.mode  = {{ php_fpm_socket.mode  | default('0666') }}

{% endif %}
; Unix user/group of processes
; Note: The user is mandatory. If the group is not set, the default user's group
;       will be used.
user = {{ php_fpm_user }}
group = {{ php_fpm_group }}

; Choose how the process manager will control the number of child processes.
; Possible Values:
;   static   ... a fixed number of child processes.
;   dynamic  ... the number of child processes are set dynamically.
;   ondemand ... no children are created at startup; children will be forked
;                when new requests will connect.
; Note: This value is mandatory.
pm = {{ php_fpm_pm.mode | mandatory }}

; The number of child processes to be created when pm is set to 'static' and the
; maximum number of child processes when pm is set to 'dynamic' or 'ondemand'.
; This value sets the limit on the number of simultaneous requests that will be
; served.
; Note: Used when pm is set to 'static', 'dynamic' or 'ondemand'
; Note: This value is mandatory.
pm.max_children = {{ php_fpm_pm.max_children | default(10) }}

{% if php_fpm_pm.mode == 'dynamic' %}
; The number of child processes created on startup.
; Note: Used only when pm is set to 'dynamic'
; Default Value: min_spare_servers + (max_spare_servers - min_spare_servers) / 2
pm.start_servers = {{ php_fpm_pm.start_servers | default('') }}

; The desired minimum number of children processes in 'idle' state (waiting to
; process). If the number of idle processes is less than this number, then some
; children will be created.
; Note: Mandatory and used only when pm is set to 'dynamic'
pm.min_spare_servers = {{ php_fpm_pm.min_spare_servers | default(1) }}

; The desired maximum number of children processes in 'idle' state (waiting to
; process). If the number of idle processes is greater than this number then
; some children will be killed.
; Note: Mandatory and used only when pm is set to 'dynamic'
pm.max_spare_servers = {{ php_fpm_pm.max_spare_servers | default(6) }}

{% endif %}
{% if php_fpm_pm.mode == 'ondemand' %}
; The number of seconds after which an idle process will be killed.
; Note: Used only when pm is set to 'ondemand'
; Default Value: 10s
pm.process_idle_timeout = {{ php_fpm_pm.process_idle_timeout | default(120) }}s

{% endif %}
; The number of requests each child process should execute before respawning.
; This can be useful to work around memory leaks in 3rd party libraries. For
; endless request processing specify '0'. Equivalent to PHP_FCGI_MAX_REQUESTS.
; Default Value: 0
pm.max_requests = {{ php_fpm_pm.max_requests | default(250) }}

; The URI to view the FPM status page. If this value is not set, no URI will be
; recognized as a status page.
; Note: The value must start with a leading slash (/). The value can be
;       anything, but it may not be a good idea to use the .php extension or it
;       may conflict with a real PHP file.
; Default Value: not set
pm.status_path = {{ php_fpm_status_path }}

; The ping URI to call the monitoring page of FPM. If this value is not set, no
; URI will be recognized as a ping page. This could be used to test from outside
; that FPM is alive and responding, or to
; - create a graph of FPM availability (rrd or such);
; - remove a server from a group if it is not responding (load balancing);
; - trigger alerts for the operating team (24/7).
; Note: The value must start with a leading slash (/). The value can be
;       anything, but it may not be a good idea to use the .php extension or it
;       may conflict with a real PHP file.
; Default Value: not set
ping.path = {{ php_fpm_ping_path }}

; The timeout for serving a single request after which the worker process will
; be killed. This option should be used when the 'max_execution_time' ini option
; does not stop script execution for some reason. A value of '0' means 'off'.
; Available units: s(econds)(default), m(inutes), h(ours), or d(ays)
; Default Value: 0
;request_terminate_timeout = 0

; The timeout for serving a single request after which a PHP backtrace will be
; dumped to the 'slowlog' file. A value of '0s' means 'off'.
; Available units: s(econds)(default), m(inutes), h(ours), or d(ays)
; Default Value: 0
;request_slowlog_timeout = 0

; The log file for slow requests
; Default Value: not set
; Note: slowlog is mandatory if request_slowlog_timeout is set
; Note: the path is *not* relative to chroot.
slowlog = {{ php_fpm_logs_dir }}/php-fpm.slow.log

; Chroot to this directory at the start. This value must be defined as an
; absolute path. When this value is not set, chroot is not used.
; Note: you can prefix with '$prefix' to chroot to the pool prefix or one
; of its subdirectories. If the pool prefix is not set, the global prefix
; will be used instead.
; Note: chrooting is a great security feature and should be used whenever
;       possible. However, all PHP paths will be relative to the chroot
;       (error_log, sessions.save_path, ...).
; Default Value: not set
{% if php_fpm_chroot_enabled | bool %}
chroot = {{ php_fpm_chroot_dir }}
{% endif %}

; Redirect worker stdout and stderr into main error log. If not set, stdout and
; stderr will be redirected to /dev/null according to FastCGI specs.
; Note: on highloaded environement, this can cause some delay in the page
; process time (several ms).
; Default Value: no
;catch_workers_output = yes

; Pass environment variables like LD_LIBRARY_PATH. All $VARIABLEs are taken from
; the current environment.
; Default Value: clean env
{% for k, v in php_fpm_env.items() %}
env[{{ k }}] = {{ v }}
{% endfor %}

; Additional php.ini defines, specific to this pool of workers. These settings
; overwrite the values previously defined in the php.ini. The directives are the
; same as the PHP SAPI:
;   php_value/php_flag             - you can set classic ini defines which can
;                                    be overwritten from PHP call 'ini_set'.
;   php_admin_value/php_admin_flag - these directives won't be overwritten by
;                                     PHP call 'ini_set'
; For php_*flag, valid values are on, off, 1, 0, true, false, yes or no.
;
; Defining 'extension' will load the corresponding shared extension from
; extension_dir. Defining 'disable_functions' or 'disable_classes' will not
; overwrite previously defined php.ini values, but will append the new value
; instead.
;
; Note: path INI options can be relative and will be expanded with the prefix
; (pool, global or /usr/lib/php5.3)
{% for k, v in _ini_overrides.items() if v != '_NONE_' %}
{% if v|string|lower in ['true', 'false', 'yes', 'no', 'on', 'off'] %}
php_admin_flag[{{ k }}] = {{ v|string|lower }}
{% else %}
php_admin_value[{{ k }}] = {{ v }}
{% endif %}
{% endfor %}
